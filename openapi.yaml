openapi: 3.0.3
info:
  title: AuthService
  description: authorization service
  version: 1.0.0
servers:
- url: https://front-end-test-u2ogfqvoga-ew.a.run.app
- url: http://front-end-test-u2ogfqvoga-ew.a.run.app
paths:
  /user:
    post:
      summary: Creates an account for the new user.
      description: Creates new account and immediatelly returns JWT tokens as cookies.
      operationId: signup
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationPayload'
      responses:
        201:
          description: The new account was created
          content: 
            text/plain: 
              example: 'Account was created successfully'
        400: 
          description: bad request
          content:
            text/plain:
              examples:
                username and password absent:
                  value: 'username absent, password absent'
                username absent:
                  value: 'username absent'
        409:
          description: conflict state
          content:
            text/plain:
              examples:
                username is taken:
                  value: 'Username <username> already in use'
                email is taken:
                  value: 'Email <email> already in use'
        500:
          description: unexpected server error
          content:
            text/plain:
              example: 'Failed to create account'
 
  /check-email-availability:
    get:
      summary: Returns whether email is available.
      description: Checks whether email passed as query argument isn't asociated with any registered user.
      operationId: checkEmailAvailability
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns 'available' if email isn't associated with any account and can be used for registration.
          content:
            text/plain:
              example: available
        400:
          description: Query doesn't include 'email' argument or it's an empty string.
          content:             
            text/plain:
              example: "Email is not provided"
        409:
          description: Returns 'exists' if email is already associated with an account.
          content:
            text/plain:
              schema:
                type: string
                example: exists
        500:
          description: An unexpected error
          content:
            text/plain:
              example: "Internal server error"
  /check-username-availability:
    get:
      summary: Returns whether username is available.
      description: Checks whether username passed as query argument isn't asociated with any registered user.
      operationId: checkUsernameAvailability
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns 'available' if username isn't associated with any account and can be used for registration.
          content:
            text/plain:
              example: available
        400:
          description: Query doesn't include 'username' argument or it's an empty string.
          content:             
            text/plain:
              example: "Username is not provided"
        409:
          description: Returns 'exists' if username is already associated with an account.
          content:
            text/plain:
              schema:
                type: string
                example: exists
        500:
          description: An unexpected error
          content:
            text/plain:
              example: "Internal server error"  
 
components:      
  schemas:
      RegistrationPayload:
        type: object
        properties:
          username:
            type: string
            pattern: /^[a-zA-Z]+[a-zA-Z0-9]*$/
            minLength: 3
            maxLength: 15
            example: bob123
          email:
            type: string
            pattern: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/
            example: bob@example.com
          password:
            type: string
            example: '$#HardPassword_000'
            minLength: 8
            maxLength: 36
          confirmPassword:
            type: string
            example: '$#HardPassword_000'
        required: [username, email, password, confirmPassword, orgName]
      
        
            
  
